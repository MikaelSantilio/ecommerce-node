// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id          String      @id @default(cuid())
  userId      String
  status      OrderStatus @default(PENDING)
  total       Decimal     @db.Decimal(12, 2)
  currency    String      @default("BRL") @db.Char(3)
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")

  // Relations
  items       OrderItem[]
  shipping    ShippingInfo?
  payment     PaymentInfo?

  @@map("orders")
  @@index([userId], name: "idx_orders_user_id")
  @@index([status], name: "idx_orders_status")
  @@index([createdAt], name: "idx_orders_created_at")
}

model OrderItem {
  id        String  @id @default(cuid())
  orderId   String  @map("order_id")
  productId String  @map("product_id")
  quantity  Int
  price     Decimal @db.Decimal(12, 2)

  // Relations
  order   Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id])

  @@map("order_items")
  @@index([orderId], name: "idx_order_items_order_id")
  @@index([productId], name: "idx_order_items_product_id")
}

model Product {
  id          String      @id @default(uuid()) @db.Uuid
  name        String      @db.Text
  slug        String      @unique @db.Text
  description String?     @db.Text
  price       Decimal     @db.Decimal(12, 2)
  currency    String      @default("BRL") @db.Char(3)
  stock       Int         @default(0)
  categoryId  String      @map("category_id") @db.Uuid
  createdAt   DateTime    @default(now()) @map("created_at")
  updatedAt   DateTime    @default(now()) @updatedAt @map("updated_at")

  // Relations
  orderItems OrderItem[]

  @@map("products")
}

model ShippingInfo {
  id          String  @id @default(cuid())
  orderId     String  @unique @map("order_id")
  address     String  @db.Text
  city        String  @db.Text
  state       String  @db.Text
  zipCode     String  @db.Text
  country     String  @default("BR") @db.Char(2)
  trackingCode String? @db.Text

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("shipping_info")
}

model PaymentInfo {
  id            String        @id @default(cuid())
  orderId       String        @unique @map("order_id")
  paymentId     String        @map("payment_id")
  method        PaymentMethod
  status        PaymentStatus
  amount        Decimal       @db.Decimal(12, 2)
  currency      String        @default("BRL") @db.Char(3)
  processedAt   DateTime?     @map("processed_at")

  // Relations
  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@map("payment_info")
}

enum OrderStatus {
  PENDING
  CONFIRMED
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
  REFUNDED
}

enum PaymentMethod {
  CREDIT_CARD
  DEBIT_CARD
  PIX
  BANK_TRANSFER
  PAYPAL
}

enum PaymentStatus {
  PENDING
  APPROVED
  REJECTED
  REFUNDED
  CANCELLED
}
