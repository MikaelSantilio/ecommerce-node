services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: ecommerce-postgres-dev
    environment:
      POSTGRES_DB: ecommerce_auth
      POSTGRES_USER: ecommerce_user
      POSTGRES_PASSWORD: ecommerce_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./packages/auth/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - ecommerce-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ecommerce_user -d ecommerce_auth"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway - Development with hot reload
  api-gateway:
    build:
      context: ./packages/api-gateway
      dockerfile: Dockerfile.dev
    container_name: ecommerce-api-gateway-dev
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=api-gateway
    volumes:
      - ./packages/api-gateway:/app:cached
      - api-gateway-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Authentication Service
  auth:
    build:
      context: ./packages/auth
      dockerfile: Dockerfile.dev
    container_name: ecommerce-auth-dev
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=auth
      - DATABASE_URL=postgresql://ecommerce_user:ecommerce_password@postgres:5432/ecommerce_auth
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
    volumes:
      - ./packages/auth/src:/app/src:cached
      - ./packages/auth/index.ts:/app/index.ts:cached
      - ./packages/auth/tsconfig.json:/app/tsconfig.json:cached
      - ./packages/auth/package.json:/app/package.json:cached
      - ./packages/auth/package-lock.json:/app/package-lock.json:cached
      - ./packages/auth/.env:/app/.env:cached
    networks:
      - ecommerce-network
    depends_on:
      postgres:
        condition: service_healthy
    restart: unless-stopped

  # Catalog Service
  catalog:
    build:
      context: ./packages/catalog
      dockerfile: Dockerfile.dev
    container_name: ecommerce-catalog-dev
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=catalog
    volumes:
      - ./packages/catalog:/app:cached
      - catalog-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Cart Service
  cart:
    build:
      context: ./packages/cart
      dockerfile: Dockerfile.dev
    container_name: ecommerce-cart-dev
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=cart
    volumes:
      - ./packages/cart:/app:cached
      - cart-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Orders Service
  orders:
    build:
      context: ./packages/orders
      dockerfile: Dockerfile.dev
    container_name: ecommerce-orders-dev
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=orders
    volumes:
      - ./packages/orders:/app:cached
      - orders-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Payments Service
  payments:
    build:
      context: ./packages/payments
      dockerfile: Dockerfile.dev
    container_name: ecommerce-payments-dev
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=payments
    volumes:
      - ./packages/payments:/app:cached
      - payments-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

  # Notifications Service
  notifications:
    build:
      context: ./packages/notifications
      dockerfile: Dockerfile.dev
    container_name: ecommerce-notifications-dev
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - SERVICE_NAME=notifications
    volumes:
      - ./packages/notifications:/app:cached
      - notifications-node-modules:/app/node_modules
    networks:
      - ecommerce-network
    restart: unless-stopped

networks:
  ecommerce-network:
    driver: bridge

volumes:
  postgres_data:
  api-gateway-node-modules:
  auth-node-modules:
  catalog-node-modules:
  cart-node-modules:
  orders-node-modules:
  payments-node-modules:
  notifications-node-modules:
